/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202303260949.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_MOSI_MOSC_INFOTAINMENT_BRIDGE_HPP_
#define V1_COM_MOSI_MOSC_INFOTAINMENT_BRIDGE_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/ByteBuffer.hpp>
#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace com {
namespace mosi {
namespace mosc {

class InfotainmentBridge {
public:
    virtual ~InfotainmentBridge() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct MediaSource : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            USB = 0,
            RADIO = 1,
            BT = 2,
            ONLINE_MUSIC = 3,
            ONLINE_RADIO = 4
        };
    
        MediaSource()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::USB)) {}
        MediaSource(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::USB):
                case static_cast< uint8_t>(Literal::RADIO):
                case static_cast< uint8_t>(Literal::BT):
                case static_cast< uint8_t>(Literal::ONLINE_MUSIC):
                case static_cast< uint8_t>(Literal::ONLINE_RADIO):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MediaSource &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MediaSource &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MediaSource &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MediaSource &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MediaSource &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MediaSource &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::USB): return "USB";
            case static_cast< uint8_t>(Literal::RADIO): return "RADIO";
            case static_cast< uint8_t>(Literal::BT): return "BT";
            case static_cast< uint8_t>(Literal::ONLINE_MUSIC): return "ONLINE_MUSIC";
            case static_cast< uint8_t>(Literal::ONLINE_RADIO): return "ONLINE_RADIO";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct MediaStatus : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            PLAYING = 0,
            PAUSED = 1,
            STOPPED = 2
        };
    
        MediaStatus()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::PLAYING)) {}
        MediaStatus(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::PLAYING):
                case static_cast< uint8_t>(Literal::PAUSED):
                case static_cast< uint8_t>(Literal::STOPPED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MediaStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MediaStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MediaStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MediaStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MediaStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MediaStatus &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::PLAYING): return "PLAYING";
            case static_cast< uint8_t>(Literal::PAUSED): return "PAUSED";
            case static_cast< uint8_t>(Literal::STOPPED): return "STOPPED";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct PageOperation : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            PREVIOUS = 0,
            NEXT = 1
        };
    
        PageOperation()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::PREVIOUS)) {}
        PageOperation(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::PREVIOUS):
                case static_cast< uint8_t>(Literal::NEXT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PageOperation &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PageOperation &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PageOperation &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PageOperation &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PageOperation &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PageOperation &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::PREVIOUS): return "PREVIOUS";
            case static_cast< uint8_t>(Literal::NEXT): return "NEXT";
            default: return "UNDEFINED";
            }
        }
    };
    struct PlayStatus : CommonAPI::Struct< MediaSource, MediaStatus> {
    
        PlayStatus()
        {
            std::get< 0>(values_) = MediaSource();
            std::get< 1>(values_) = MediaStatus();
        }
        PlayStatus(const MediaSource &_source, const MediaStatus &_status)
        {
            std::get< 0>(values_) = _source;
            std::get< 1>(values_) = _status;
        }
        inline const MediaSource &getSource() const { return std::get< 0>(values_); }
        inline void setSource(const MediaSource &_value) { std::get< 0>(values_) = _value; }
        inline const MediaStatus &getStatus() const { return std::get< 1>(values_); }
        inline void setStatus(const MediaStatus &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const PlayStatus& _other) const {
        return (getSource() == _other.getSource() && getStatus() == _other.getStatus());
        }
        inline bool operator!=(const PlayStatus &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct Song : CommonAPI::Struct< MediaSource, std::string, std::string, uint64_t, CommonAPI::ByteBuffer> {
    
        Song()
        {
            std::get< 0>(values_) = MediaSource();
            std::get< 1>(values_) = "";
            std::get< 2>(values_) = "";
            std::get< 3>(values_) = 0ull;
            std::get< 4>(values_) = CommonAPI::ByteBuffer();
        }
        Song(const MediaSource &_source, const std::string &_songName, const std::string &_singer, const uint64_t &_duration, const CommonAPI::ByteBuffer &_albumArt)
        {
            std::get< 0>(values_) = _source;
            std::get< 1>(values_) = _songName;
            std::get< 2>(values_) = _singer;
            std::get< 3>(values_) = _duration;
            std::get< 4>(values_) = _albumArt;
        }
        inline const MediaSource &getSource() const { return std::get< 0>(values_); }
        inline void setSource(const MediaSource &_value) { std::get< 0>(values_) = _value; }
        inline const std::string &getSongName() const { return std::get< 1>(values_); }
        inline void setSongName(const std::string &_value) { std::get< 1>(values_) = _value; }
        inline const std::string &getSinger() const { return std::get< 2>(values_); }
        inline void setSinger(const std::string &_value) { std::get< 2>(values_) = _value; }
        inline const uint64_t &getDuration() const { return std::get< 3>(values_); }
        inline void setDuration(const uint64_t &_value) { std::get< 3>(values_) = _value; }
        inline const CommonAPI::ByteBuffer &getAlbumArt() const { return std::get< 4>(values_); }
        inline void setAlbumArt(const CommonAPI::ByteBuffer &_value) { std::get< 4>(values_) = _value; }
        inline bool operator==(const Song& _other) const {
        return (getSource() == _other.getSource() && getSongName() == _other.getSongName() && getSinger() == _other.getSinger() && getDuration() == _other.getDuration() && getAlbumArt() == _other.getAlbumArt());
        }
        inline bool operator!=(const Song &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct Progress : CommonAPI::Struct< MediaSource, uint16_t> {
    
        Progress()
        {
            std::get< 0>(values_) = MediaSource();
            std::get< 1>(values_) = 0u;
        }
        Progress(const MediaSource &_source, const uint16_t &_value)
        {
            std::get< 0>(values_) = _source;
            std::get< 1>(values_) = _value;
        }
        inline const MediaSource &getSource() const { return std::get< 0>(values_); }
        inline void setSource(const MediaSource &_value) { std::get< 0>(values_) = _value; }
        inline const uint16_t &getValue() const { return std::get< 1>(values_); }
        inline void setValue(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const Progress& _other) const {
        return (getSource() == _other.getSource() && getValue() == _other.getValue());
        }
        inline bool operator!=(const Progress &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct Tbt : CommonAPI::Struct< uint32_t, uint32_t, std::string, std::string> {
    
        Tbt()
        {
            std::get< 0>(values_) = 0ul;
            std::get< 1>(values_) = 0ul;
            std::get< 2>(values_) = "";
            std::get< 3>(values_) = "";
        }
        Tbt(const uint32_t &_iconType, const uint32_t &_distanceToNext, const std::string &_currentRoad, const std::string &_nextRoad)
        {
            std::get< 0>(values_) = _iconType;
            std::get< 1>(values_) = _distanceToNext;
            std::get< 2>(values_) = _currentRoad;
            std::get< 3>(values_) = _nextRoad;
        }
        inline const uint32_t &getIconType() const { return std::get< 0>(values_); }
        inline void setIconType(const uint32_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint32_t &getDistanceToNext() const { return std::get< 1>(values_); }
        inline void setDistanceToNext(const uint32_t &_value) { std::get< 1>(values_) = _value; }
        inline const std::string &getCurrentRoad() const { return std::get< 2>(values_); }
        inline void setCurrentRoad(const std::string &_value) { std::get< 2>(values_) = _value; }
        inline const std::string &getNextRoad() const { return std::get< 3>(values_); }
        inline void setNextRoad(const std::string &_value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const Tbt& _other) const {
        return (getIconType() == _other.getIconType() && getDistanceToNext() == _other.getDistanceToNext() && getCurrentRoad() == _other.getCurrentRoad() && getNextRoad() == _other.getNextRoad());
        }
        inline bool operator!=(const Tbt &_other) const {
            return !((*this) == _other);
        }
    
    };
};

const char* InfotainmentBridge::getInterface() {
    return ("com.mosi.mosc.InfotainmentBridge:v1_0");
}

CommonAPI::Version InfotainmentBridge::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace mosc
} // namespace mosi
} // namespace com
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_MOSI_MOSC_INFOTAINMENT_BRIDGE_HPP_
