/*
* This file was generated by the CommonAPI Generators.
* Used com.fawvw.commonapi.fdbus 0.1.0.v202306290745.
* Used org.franca.core 0.13.1.201807231814.
*
*/
#ifndef V1_COM_MOSI_MOSC_Infotainment_Bridge_FDBUS_PROXY_HPP_
#define V1_COM_MOSI_MOSC_Infotainment_Bridge_FDBUS_PROXY_HPP_

#include <v1/com/mosi/mosc/InfotainmentBridgeProxyBase.hpp>
#include "v1/com/mosi/mosc/InfotainmentBridgeFDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/FDBus/FDBusAddress.hpp>
#include <CommonAPI/FDBus/FDBusFactory.hpp>
#include <CommonAPI/FDBus/FDBusProxy.hpp>
#include <CommonAPI/FDBus/FDBusAddressTranslator.hpp>
#include <CommonAPI/FDBus/FDBusAttribute.hpp>
#include <CommonAPI/FDBus/FDBusEvent.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace com {
namespace mosi {
namespace mosc {

class InfotainmentBridgeFDBusProxy
    : virtual public InfotainmentBridgeProxyBase,
      virtual public CommonAPI::FDBus::FDBusProxy {
public:
    InfotainmentBridgeFDBusProxy(
        const CommonAPI::FDBus::FDBusAddress &_address,
        const std::shared_ptr<CommonAPI::FDBus::FDBusProxyConnection> &_connection);

    virtual ~InfotainmentBridgeFDBusProxy();

    virtual ServiceStatusAttribute& getServiceStatusAttribute();

    virtual SongDetailEvent& getSongDetailEvent();
    virtual CurrentProgressEvent& getCurrentProgressEvent();
    virtual PlayStatusEvent& getPlayStatusEvent();
    virtual TbtInfoEvent& getTbtInfoEvent();
    virtual ControlPageEvent& getControlPageEvent();



    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

    virtual std::future<void> getCompletionFuture();

private:

    CommonAPI::FDBus::FDBusObservableAttribute<CommonAPI::FDBus::FDBusReadonlyAttribute<ServiceStatusAttribute>> serviceStatus_;

    CommonAPI::FDBus::FDBusEvent<SongDetailEvent, CommonAPI::Deployable< ::v1::com::mosi::mosc::InfotainmentBridge::Song, ::v1::com::mosi::mosc::InfotainmentBridge_::SongDeployment_t >> songDetail_;
    CommonAPI::FDBus::FDBusEvent<CurrentProgressEvent, CommonAPI::Deployable< ::v1::com::mosi::mosc::InfotainmentBridge::Progress, ::v1::com::mosi::mosc::InfotainmentBridge_::ProgressDeployment_t >> currentProgress_;
    CommonAPI::FDBus::FDBusEvent<PlayStatusEvent, CommonAPI::Deployable< ::v1::com::mosi::mosc::InfotainmentBridge::PlayStatus, ::v1::com::mosi::mosc::InfotainmentBridge_::PlayStatusDeployment_t >> playStatus_;
    CommonAPI::FDBus::FDBusEvent<TbtInfoEvent, CommonAPI::Deployable< ::v1::com::mosi::mosc::InfotainmentBridge::Tbt, ::v1::com::mosi::mosc::InfotainmentBridge_::TbtDeployment_t >> tbtInfo_;
    CommonAPI::FDBus::FDBusEvent<ControlPageEvent, CommonAPI::Deployable< ::v1::com::mosi::mosc::InfotainmentBridge::PageOperation, CommonAPI::EmptyDeployment >> controlPage_;


    std::promise<void> completed_;
};

} // namespace mosc
} // namespace mosi
} // namespace com
} // namespace v1

#endif // V1_COM_MOSI_MOSC_Infotainment_Bridge_FDBUS_PROXY_HPP_

