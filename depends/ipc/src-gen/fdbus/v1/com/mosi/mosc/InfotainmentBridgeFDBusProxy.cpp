/*
* This file was generated by the CommonAPI Generators.
* Used com.fawvw.commonapi.fdbus 0.1.0.v202306290745.
* Used org.franca.core 0.13.1.201807231814.
*
*/
#include <v1/com/mosi/mosc/InfotainmentBridgeFDBusProxy.hpp>

namespace v1 {
namespace com {
namespace mosi {
namespace mosc {

std::shared_ptr<CommonAPI::FDBus::FDBusProxy> createInfotainmentBridgeFDBusProxy(
    const CommonAPI::FDBus::FDBusAddress &_address,
    const std::shared_ptr<CommonAPI::FDBus::FDBusProxyConnection> &_connection) {
    return std::make_shared< InfotainmentBridgeFDBusProxy>(_address, _connection);
}

void initializeInfotainmentBridgeFDBusProxy() {
    CommonAPI::FDBus::FDBusAddressTranslator::get()->insert(
        "android:com.mosi.mosc.InfotainmentBridge:v1_0:infotainmentBridge",
        "com.mosi.mosc.InfotainmentBridge.v1_0",
        "infotainmentBridge");
    CommonAPI::FDBus::FDBusAddressTranslator::get()->setBooleanValue(
        "android:com.mosi.mosc.InfotainmentBridge:v1_0:infotainmentBridge",
        "EnableUDP",
        false);
    CommonAPI::FDBus::FDBusAddressTranslator::get()->setBooleanValue(
        "android:com.mosi.mosc.InfotainmentBridge:v1_0:infotainmentBridge",
        "EnableReconnect",
        true);
    CommonAPI::FDBus::FDBusAddressTranslator::get()->setBooleanValue(
        "android:com.mosi.mosc.InfotainmentBridge:v1_0:infotainmentBridge",
        "ActivateReconnect",
        true);
    CommonAPI::FDBus::FDBusAddressTranslator::get()->setBooleanValue(
        "android:com.mosi.mosc.InfotainmentBridge:v1_0:infotainmentBridge",
        "EnableTcpBlockingMode",
        true);
    CommonAPI::FDBus::FDBusAddressTranslator::get()->setBooleanValue(
        "android:com.mosi.mosc.InfotainmentBridge:v1_0:infotainmentBridge",
        "EnableAysncWrite",
        true);
    CommonAPI::FDBus::FDBusAddressTranslator::get()->setBooleanValue(
        "android:com.mosi.mosc.InfotainmentBridge:v1_0:infotainmentBridge",
        "EnableAysncRead",
        true);
    CommonAPI::FDBus::FDBusAddressTranslator::get()->setBooleanValue(
        "android:com.mosi.mosc.InfotainmentBridge:v1_0:infotainmentBridge",
        "EnableBlockingMode",
        true);
    CommonAPI::FDBus::FDBusAddressTranslator::get()->setBooleanValue(
        "android:com.mosi.mosc.InfotainmentBridge:v1_0:infotainmentBridge",
        "EnableTCP",
        true);
    CommonAPI::FDBus::FDBusAddressTranslator::get()->setBooleanValue(
        "android:com.mosi.mosc.InfotainmentBridge:v1_0:infotainmentBridge",
        "EnableTCPSecure",
        true);
    CommonAPI::FDBus::FDBusAddressTranslator::get()->setIntValue(
        "android:com.mosi.mosc.InfotainmentBridge:v1_0:infotainmentBridge",
        "ExportableLevel",
        1); 
    CommonAPI::FDBus::FDBusAddressTranslator::get()->setIntValue(
        "android:com.mosi.mosc.InfotainmentBridge:v1_0:infotainmentBridge",
        "SSLVerifyType",
        3);
    CommonAPI::FDBus::Factory::get()->registerProxyCreateMethod(
        InfotainmentBridge::getInterface(),
        &createInfotainmentBridgeFDBusProxy);
}

INITIALIZER(registerInfotainmentBridgeFDBusProxy) {
    CommonAPI::FDBus::Factory::get()->registerInterface(initializeInfotainmentBridgeFDBusProxy);
}

InfotainmentBridgeFDBusProxy::InfotainmentBridgeFDBusProxy(
    const CommonAPI::FDBus::FDBusAddress &_address,
    const std::shared_ptr<CommonAPI::FDBus::FDBusProxyConnection> &_connection)
    :   CommonAPI::FDBus::FDBusProxy(_address, _connection)
,        serviceStatus_(*this, "onServiceStatusAttributeChanged", "b", "getServiceStatusAttribute", static_cast< CommonAPI::EmptyDeployment* >(nullptr))
,        songDetail_(*this, "songDetail", "(ysstay)", std::make_tuple(static_cast< ::v1::com::mosi::mosc::InfotainmentBridge_::SongDeployment_t* >(nullptr))),
        currentProgress_(*this, "currentProgress", "(yq)", std::make_tuple(static_cast< ::v1::com::mosi::mosc::InfotainmentBridge_::ProgressDeployment_t* >(nullptr))),
        playStatus_(*this, "playStatus", "(yy)", std::make_tuple(static_cast< ::v1::com::mosi::mosc::InfotainmentBridge_::PlayStatusDeployment_t* >(nullptr))),
        tbtInfo_(*this, "tbtInfo", "(uuss)", std::make_tuple(static_cast< ::v1::com::mosi::mosc::InfotainmentBridge_::TbtDeployment_t* >(nullptr))),
        controlPage_(*this, "controlPage", "y", std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)))
{
}

InfotainmentBridgeFDBusProxy::~InfotainmentBridgeFDBusProxy() {
    completed_.set_value();
}

InfotainmentBridgeFDBusProxy::ServiceStatusAttribute& InfotainmentBridgeFDBusProxy::getServiceStatusAttribute() {
    return serviceStatus_;
}

InfotainmentBridgeFDBusProxy::SongDetailEvent& InfotainmentBridgeFDBusProxy::getSongDetailEvent() {
    return songDetail_;
}
InfotainmentBridgeFDBusProxy::CurrentProgressEvent& InfotainmentBridgeFDBusProxy::getCurrentProgressEvent() {
    return currentProgress_;
}
InfotainmentBridgeFDBusProxy::PlayStatusEvent& InfotainmentBridgeFDBusProxy::getPlayStatusEvent() {
    return playStatus_;
}
InfotainmentBridgeFDBusProxy::TbtInfoEvent& InfotainmentBridgeFDBusProxy::getTbtInfoEvent() {
    return tbtInfo_;
}
InfotainmentBridgeFDBusProxy::ControlPageEvent& InfotainmentBridgeFDBusProxy::getControlPageEvent() {
    return controlPage_;
}



void InfotainmentBridgeFDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

std::future<void> InfotainmentBridgeFDBusProxy::getCompletionFuture() {
    return completed_.get_future();
}

} // namespace mosc
} // namespace mosi
} // namespace com
} // namespace v1
